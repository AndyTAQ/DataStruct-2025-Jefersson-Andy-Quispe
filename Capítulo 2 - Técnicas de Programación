Capítulo 2 - Técnicas de Programación (Antti Laaksonen)
3.1.1 Calculation Rules

// O(1)
int a = 1, b = 2, c;
a++;
b++;
c = a + b;
// O(n)
for (int i = 1; i <= n; i++) {
// constant time operations
}
// O(n^2)
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= n; j++) {
// constant time operations
}
}
// O(n*m)
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= m; j++) {
// constant time operations
}
}
// Recursive O(n)
void f(int n) {
if (n == 1) return;
f(n - 1);
}
// Recursive O(2^n)
void g(int n) {
if (n == 1) return;
g(n - 1);
g(n - 1);
}

3.2.1 Maximum Subarray Sum

// O(n^3)
int best = 0;
for (int a = 0; a < n; a++) {
for (int b = a; b < n; b++) {
int sum = 0;
for (int k = a; k <= b; k++) {
sum += array[k];
}
best = max(best, sum);
}
}
cout << best << "\n";
// O(n^2)
best = 0;
for (int a = 0; a < n; a++) {
int sum = 0;
for (int b = a; b < n; b++) {
sum += array[b];
best = max(best, sum);
}
}
cout << best << "\n";
// O(n) (Kadane's Algorithm)
best = 0, sum = 0;
for (int k = 0; k < n; k++) {
sum = max(array[k], sum + array[k]);
best = max(best, sum);
}
cout << best << "\n";

3.2.2 Two Queens Problem

// O(n^4)
int q1 = 0;
for (int r1 = 0; r1 < n; r1++) {
for (int c1 = 0; c1 < n; c1++) {
for (int r2 = 0; r2 < n; r2++) {
for (int c2 = 0; c2 < n; c2++) {
if (r1 == r2 && c1 == c2) continue;
if (r1 == r2 || c1 == c2 || abs(r1 - r2) == abs(c1 - c2)) continue;
q1++;
}
}
}
}
cout << q1/2 << "\n";
// O(n^2)
int q2 = 0;
for (int r1 = 0; r1 < n; r1++) {
for (int c1 = 0; c1 < n; c1++) {
int attacked = (n - 1) * 2 + min(r1, c1) + min(r1, n - 1 - c1) + min(n - 1 - r1, c1) +
min(n - 1 - r1, n - 1 - c1);
q2 += n*n - 1 - attacked;
}
}
cout << q2/2 << "\n";
// O(n)
vector<int> q(n + 1);
q[1] = 0;
for (int i = 2; i <= n; i++) {
q[i] = q[i - 1] + 2 * (i - 1) * (i - 2);
}
cout << q[n] << "\n";
// O(1)
int result = (3*n*n*n*n - 10*n*n*n + 9*n*n - 2*n)/6;
cout << result << "\n";

3.3.1 Compiler Output

// Optimized linear search
bool ok = false;
for (int i = 0; i < n; i++) {
if (a[i] == x) { ok = true; break; }
}
// Sentinel version
a[n] = x;
int i = 0;
while (a[i] != x) i++;
bool found = (i < n);
3.3.2 Processor Features
// Cache-friendly sum (row-major)
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
s += x[i][j];
}
}
// Parallelism trick (factorial modulo M)
ll f1 = 1, f2 = 1;
for (int i = 1; i <= n; i += 2) {
f1 = (f1 * i) % M;
f2 = (f2 * (i + 1)) % M;
}
ll f = (f1 * f2) % M;
