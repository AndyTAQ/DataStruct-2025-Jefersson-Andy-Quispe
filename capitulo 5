Capítulo 2 - Técnicas de Programación (Antti Laaksonen)
5.1.1 Vectores

#include <bits/stdc++.h>
using namespace std;
int main() {
vector<int> v;
v.push_back(3);
v.push_back(2);
v.push_back(5);
for (auto x : v)
cout << x << " ";
cout << "\n";
cout << v.back() << "\n";
v.pop_back();
cout << v.back() << "\n";
return 0;
}


5.1.2 Iteradores y Rangos

#include <bits/stdc++.h>
using namespace std;
int main() {
vector<int> v = {2,3,3,5,7,8,8,8};
sort(v.begin(), v.end());
auto a = lower_bound(v.begin(), v.end(), 5);
auto b = upper_bound(v.begin(), v.end(), 5);
cout << *a << " " << *b << "\n";
sort(v.begin(), v.end());
v.erase(unique(v.begin(), v.end()), v.end());
for (int x : v) cout << x << " ";
cout << "\n";
return 0;
}


5.1.3 Deque, Stack y Queue

#include <bits/stdc++.h>
using namespace std;
int main() {
deque<int> d;
d.push_back(5);
d.push_back(2);
d.push_front(3);
d.pop_back();
d.pop_front();
stack<int> s;
s.push(2);
s.push(5);
cout << s.top() << "\n";
s.pop();
cout << s.top() << "\n";
queue<int> q;
q.push(2);
q.push(5);
cout << q.front() << "\n";
q.pop();
cout << q.back() << "\n";
return 0;
}


5.2.1 Sets y Multisets

#include <bits/stdc++.h>
using namespace std;
int main() {
set<int> s;
s.insert(3); s.insert(2); s.insert(5);
cout << s.count(3) << "\n";
s.erase(3);
s.insert(4);
for (auto x : s) cout << x << " ";
cout << "\n";
auto it = s.find(4);
if (it != s.end()) cout << *it << "\n";
multiset<int> ms;
ms.insert(5);
ms.insert(5);
ms.insert(5);
cout << ms.count(5) << "\n";
ms.erase(ms.find(5));
cout << ms.count(5) << "\n";
return 0;
}


5.2.2 Maps

#include <bits/stdc++.h>
using namespace std;
int main() {
map<string, int> m;
m["monkey"] = 4;
m["banana"] = 3;
m["harpsichord"] = 9;
cout << m["banana"] << "\n";
cout << m["aybabtu"] << "\n"; // se agrega automáticamente con valor 0
for (auto x : m)
cout << x.first << " " << x.second << "\n";
return 0;
}


5.2.3 Priority Queue

#include <bits/stdc++.h>
using namespace std;
int main() {
priority_queue<int> q;
q.push(3); q.push(5); q.push(7); q.push(2);
cout << q.top() << "\n";
q.pop();
cout << q.top() << "\n";
q.pop();
q.push(6);
cout << q.top() << "\n";
q.pop();
priority_queue<int, vector<int>, greater<int>> minq;
minq.push(3); minq.push(5); minq.push(1);
cout << minq.top() << "\n";
return 0;
}


5.2.4 Policy-Based Sets

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
indexed_set;
int main() {
indexed_set s;
s.insert(2);
s.insert(3);
s.insert(7);
s.insert(9);
auto x = s.find_by_order(2);
cout << *x << "\n";
cout << s.order_of_key(7) << "\n";
cout << s.order_of_key(6) << "\n";
return 0;
}
